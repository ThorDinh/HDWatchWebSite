/*
 * Created on 2023-06-15 ( 14:26:30 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.3.0
 */
package com.hdwatch.entity;

import java.io.Serializable;
import java.util.Date;
import java.util.List;
import javax.persistence.*;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * JPA entity class for "Products"
 *
 * @author Telosys
 *
 */
@Entity
@Table(name="products", schema="dbo", catalog="HDWatch" )
public class Products implements Serializable {

    private static final long serialVersionUID = 1L;

    //--- ENTITY PRIMARY KEY 
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Integer    id ;

    //--- ENTITY DATA FIELDS 
    @Column(name="name", nullable=false, length=2147483647)
    private String     name ;

    @Column(name="price", nullable=false)
    private Double     price ;

    @Column(name="old_price", nullable=false)
    private Double     oldPrice ;

    @Column(name="available", nullable=false)
    private Boolean    available ;

    @Temporal(TemporalType.DATE)
    @Column(name="create_date", nullable=false)
    private Date       createDate ;

    @Column(name="brand_id", nullable=false)
    private Integer    brandId ;

    @Column(name="category_id", nullable=false)
    private Integer    categoryId ;

    @Column(name="stock", nullable=false)
    private Integer    stock ;

    @Column(name="description", length=2147483647)
    private String     description ;


    //--- ENTITY LINKS ( RELATIONSHIP )
    @ManyToOne
    @JoinColumn(name="brand_id", referencedColumnName="id", insertable=false, updatable=false)
    private Brands     brands ; 
    
    @JsonIgnore
    @OneToMany(mappedBy="products")
    private List<Cartdetails> listOfCartdetails ; 

    @ManyToOne
    @JoinColumn(name="category_id", referencedColumnName="id", insertable=false, updatable=false)
    private Categories categories ; 
    
    @JsonIgnore
    @OneToMany(mappedBy="products")
    private List<Favoritedetails> listOfFavoritedetails ; 
    
    @JsonIgnore
    @OneToMany(mappedBy="products")
    private List<Orderdetails> listOfOrderdetails ; 

    @JsonIgnore
    @OneToMany(mappedBy="products")
    private List<Productimagedetail> listOfProductimagedetail ; 


    /**
     * Constructor
     */
    public Products() {
		super();
    }
    
    //--- GETTERS & SETTERS FOR FIELDS
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    public void setName( String name ) {
        this.name = name ;
    }
    public String getName() {
        return this.name;
    }

    public void setPrice( Double price ) {
        this.price = price ;
    }
    public Double getPrice() {
        return this.price;
    }

    public void setOldPrice( Double oldPrice ) {
        this.oldPrice = oldPrice ;
    }
    public Double getOldPrice() {
        return this.oldPrice;
    }

    public void setAvailable( Boolean available ) {
        this.available = available ;
    }
    public Boolean getAvailable() {
        return this.available;
    }

    public void setCreateDate( Date createDate ) {
        this.createDate = createDate ;
    }
    public Date getCreateDate() {
        return this.createDate;
    }

    public void setBrandId( Integer brandId ) {
        this.brandId = brandId ;
    }
    public Integer getBrandId() {
        return this.brandId;
    }

    public void setCategoryId( Integer categoryId ) {
        this.categoryId = categoryId ;
    }
    public Integer getCategoryId() {
        return this.categoryId;
    }

    public void setStock( Integer stock ) {
        this.stock = stock ;
    }
    public Integer getStock() {
        return this.stock;
    }

    public void setDescription( String description ) {
        this.description = description ;
    }
    public String getDescription() {
        return this.description;
    }

    //--- GETTERS FOR LINKS
    public Brands getBrands() {
        return this.brands;
    } 

    public List<Cartdetails> getListOfCartdetails() {
        return this.listOfCartdetails;
    } 

    public Categories getCategories() {
        return this.categories;
    } 

    public List<Favoritedetails> getListOfFavoritedetails() {
        return this.listOfFavoritedetails;
    } 

    public List<Orderdetails> getListOfOrderdetails() {
        return this.listOfOrderdetails;
    } 

    public List<Productimagedetail> getListOfProductimagedetail() {
        return this.listOfProductimagedetail;
    } 

    //--- toString specific method
	@Override
    public String toString() { 
        StringBuilder sb = new StringBuilder(); 
        sb.append(id);
        sb.append("|");
        sb.append(name);
        sb.append("|");
        sb.append(price);
        sb.append("|");
        sb.append(oldPrice);
        sb.append("|");
        sb.append(available);
        sb.append("|");
        sb.append(createDate);
        sb.append("|");
        sb.append(brandId);
        sb.append("|");
        sb.append(categoryId);
        sb.append("|");
        sb.append(stock);
        sb.append("|");
        sb.append(description);
        return sb.toString(); 
    } 

}
